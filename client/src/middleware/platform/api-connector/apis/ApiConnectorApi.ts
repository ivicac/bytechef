/* tslint:disable */
/* eslint-disable */
/**
 * The Platform API Connector Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiConnectorModel,
  ImportOpenApiSpecificationRequestModel,
} from '../models/index';
import {
    ApiConnectorModelFromJSON,
    ApiConnectorModelToJSON,
    ImportOpenApiSpecificationRequestModelFromJSON,
    ImportOpenApiSpecificationRequestModelToJSON,
} from '../models/index';

export interface CreateApiConnectorRequest {
    apiConnectorModel: Omit<ApiConnectorModel, 'createdBy'|'createdDate'|'definition'|'lastModifiedBy'|'lastModifiedDate'|'specification'>;
}

export interface DeleteApiConnectorRequest {
    id: number;
}

export interface EnableApiConnectorRequest {
    id: number;
    enable: boolean;
}

export interface GetApiConnectorRequest {
    id: number;
}

export interface ImportOpenApiSpecificationRequest {
    importOpenApiSpecificationRequestModel: ImportOpenApiSpecificationRequestModel;
}

export interface UpdateApiConnectorRequest {
    id: number;
    apiConnectorModel: Omit<ApiConnectorModel, 'createdBy'|'createdDate'|'definition'|'lastModifiedBy'|'lastModifiedDate'|'specification'>;
}

/**
 * 
 */
export class ApiConnectorApi extends runtime.BaseAPI {

    /**
     * Create a new API Connector.
     * Create a new API Connector
     */
    async createApiConnectorRaw(requestParameters: CreateApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiConnectorModel>> {
        if (requestParameters['apiConnectorModel'] == null) {
            throw new runtime.RequiredError(
                'apiConnectorModel',
                'Required parameter "apiConnectorModel" was null or undefined when calling createApiConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-connectors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiConnectorModelToJSON(requestParameters['apiConnectorModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiConnectorModelFromJSON(jsonValue));
    }

    /**
     * Create a new API Connector.
     * Create a new API Connector
     */
    async createApiConnector(requestParameters: CreateApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiConnectorModel> {
        const response = await this.createApiConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API Connector.
     * Delete an API Connector
     */
    async deleteApiConnectorRaw(requestParameters: DeleteApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API Connector.
     * Delete an API Connector
     */
    async deleteApiConnector(requestParameters: DeleteApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiConnectorRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a API Connector.
     * Enable/disable a API Connector.
     */
    async enableApiConnectorRaw(requestParameters: EnableApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableApiConnector().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableApiConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-connectors/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a API Connector.
     * Enable/disable a API Connector.
     */
    async enableApiConnector(requestParameters: EnableApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableApiConnectorRaw(requestParameters, initOverrides);
    }

    /**
     * Get an API Connector by id.
     * Get an API Connector by id
     */
    async getApiConnectorRaw(requestParameters: GetApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiConnectorModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiConnectorModelFromJSON(jsonValue));
    }

    /**
     * Get an API Connector by id.
     * Get an API Connector by id
     */
    async getApiConnector(requestParameters: GetApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiConnectorModel> {
        const response = await this.getApiConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get API Connectors.
     * Get API Connectors
     */
    async getApiConnectorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiConnectorModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-connectors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiConnectorModelFromJSON));
    }

    /**
     * Get API Connectors.
     * Get API Connectors
     */
    async getApiConnectors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiConnectorModel>> {
        const response = await this.getApiConnectorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create API Connector by importing OpenAPI specification.
     * Create API Connector by importing OpenAPI specification
     */
    async importOpenApiSpecificationRaw(requestParameters: ImportOpenApiSpecificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiConnectorModel>> {
        if (requestParameters['importOpenApiSpecificationRequestModel'] == null) {
            throw new runtime.RequiredError(
                'importOpenApiSpecificationRequestModel',
                'Required parameter "importOpenApiSpecificationRequestModel" was null or undefined when calling importOpenApiSpecification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-connectors/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportOpenApiSpecificationRequestModelToJSON(requestParameters['importOpenApiSpecificationRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiConnectorModelFromJSON(jsonValue));
    }

    /**
     * Create API Connector by importing OpenAPI specification.
     * Create API Connector by importing OpenAPI specification
     */
    async importOpenApiSpecification(requestParameters: ImportOpenApiSpecificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiConnectorModel> {
        const response = await this.importOpenApiSpecificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing API Connector.
     * Update an existing API Connector
     */
    async updateApiConnectorRaw(requestParameters: UpdateApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiConnectorModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApiConnector().'
            );
        }

        if (requestParameters['apiConnectorModel'] == null) {
            throw new runtime.RequiredError(
                'apiConnectorModel',
                'Required parameter "apiConnectorModel" was null or undefined when calling updateApiConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiConnectorModelToJSON(requestParameters['apiConnectorModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiConnectorModelFromJSON(jsonValue));
    }

    /**
     * Update an existing API Connector.
     * Update an existing API Connector
     */
    async updateApiConnector(requestParameters: UpdateApiConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiConnectorModel> {
        const response = await this.updateApiConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
