/* tslint:disable */
/* eslint-disable */
/**
 * The Automation API Platform Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiCollectionModel,
  EnvironmentModel,
} from '../models/index';
import {
    ApiCollectionModelFromJSON,
    ApiCollectionModelToJSON,
    EnvironmentModelFromJSON,
    EnvironmentModelToJSON,
} from '../models/index';

export interface CreateApiCollectionRequest {
    apiCollectionModel: Omit<ApiCollectionModel, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'>;
}

export interface DeleteApiCollectionRequest {
    id: number;
}

export interface GetApiCollectionRequest {
    id: number;
}

export interface GetWorkspaceApiCollectionsRequest {
    id: number;
    environment?: EnvironmentModel;
    projectId?: number;
    tagId?: number;
}

export interface UpdateApiCollectionRequest {
    id: number;
    apiCollectionModel: Omit<ApiCollectionModel, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'>;
}

/**
 * 
 */
export class ApiCollectionApi extends runtime.BaseAPI {

    /**
     * Create a new API collection.
     * Create a new API collection
     */
    async createApiCollectionRaw(requestParameters: CreateApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiCollectionModel>> {
        if (requestParameters['apiCollectionModel'] == null) {
            throw new runtime.RequiredError(
                'apiCollectionModel',
                'Required parameter "apiCollectionModel" was null or undefined when calling createApiCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCollectionModelToJSON(requestParameters['apiCollectionModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCollectionModelFromJSON(jsonValue));
    }

    /**
     * Create a new API collection.
     * Create a new API collection
     */
    async createApiCollection(requestParameters: CreateApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCollectionModel> {
        const response = await this.createApiCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API collection.
     * Delete an API collection
     */
    async deleteApiCollectionRaw(requestParameters: DeleteApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API collection.
     * Delete an API collection
     */
    async deleteApiCollection(requestParameters: DeleteApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Get an API collection by id.
     * Get an API collection by id
     */
    async getApiCollectionRaw(requestParameters: GetApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiCollectionModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCollectionModelFromJSON(jsonValue));
    }

    /**
     * Get an API collection by id.
     * Get an API collection by id
     */
    async getApiCollection(requestParameters: GetApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCollectionModel> {
        const response = await this.getApiCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all workspaceAPI collections.
     * Get all workspaceAPI collections
     */
    async getWorkspaceApiCollectionsRaw(requestParameters: GetWorkspaceApiCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiCollectionModel>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkspaceApiCollections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environment'] != null) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tagId'] = requestParameters['tagId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{id}/api-collections`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiCollectionModelFromJSON));
    }

    /**
     * Get all workspaceAPI collections.
     * Get all workspaceAPI collections
     */
    async getWorkspaceApiCollections(requestParameters: GetWorkspaceApiCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiCollectionModel>> {
        const response = await this.getWorkspaceApiCollectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing API collection.
     * Update an existing API collection
     */
    async updateApiCollectionRaw(requestParameters: UpdateApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiCollectionModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApiCollection().'
            );
        }

        if (requestParameters['apiCollectionModel'] == null) {
            throw new runtime.RequiredError(
                'apiCollectionModel',
                'Required parameter "apiCollectionModel" was null or undefined when calling updateApiCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCollectionModelToJSON(requestParameters['apiCollectionModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCollectionModelFromJSON(jsonValue));
    }

    /**
     * Update an existing API collection.
     * Update an existing API collection
     */
    async updateApiCollection(requestParameters: UpdateApiCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCollectionModel> {
        const response = await this.updateApiCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
