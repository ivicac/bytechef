/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UnifiedIntegrationModel,
} from '../models/index';
import {
    UnifiedIntegrationModelFromJSON,
    UnifiedIntegrationModelToJSON,
} from '../models/index';

export interface EnableUnifiedIntegrationRequest {
    componentName: string;
    enable: boolean;
}

/**
 * 
 */
export class UnifiedIntegrationApi extends runtime.BaseAPI {

    /**
     * Enable/disable a unified integration.
     * Enable/disable a unified integration
     */
    async enableUnifiedIntegrationRaw(requestParameters: EnableUnifiedIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentName'] == null) {
            throw new runtime.RequiredError(
                'componentName',
                'Required parameter "componentName" was null or undefined when calling enableUnifiedIntegration().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableUnifiedIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unified-integrations/{componentName}/enable/{enable}`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters['componentName']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a unified integration.
     * Enable/disable a unified integration
     */
    async enableUnifiedIntegration(requestParameters: EnableUnifiedIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableUnifiedIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * Get unified integrations.
     * Get unified integrations
     */
    async getUnifiedIntegrationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UnifiedIntegrationModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unified-integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnifiedIntegrationModelFromJSON));
    }

    /**
     * Get unified integrations.
     * Get unified integrations
     */
    async getUnifiedIntegrations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UnifiedIntegrationModel>> {
        const response = await this.getUnifiedIntegrationsRaw(initOverrides);
        return await response.value();
    }

}
