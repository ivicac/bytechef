/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.datasync.configuration.web.rest;

import com.bytechef.platform.datasync.configuration.web.rest.model.DataSyncModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-16T09:54:27.297856+02:00[Europe/Zagreb]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "data-sync", description = "The Platform Data Sync Internal API")
public interface DataSyncApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /data-syncs : Create a new data sync
     * Create a new data sync.
     *
     * @param dataSyncModel  (required)
     * @return The data sync object. (status code 200)
     */
    @Operation(
        operationId = "createDataSync",
        summary = "Create a new data sync",
        description = "Create a new data sync.",
        tags = { "data-sync" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The data sync object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataSyncModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/data-syncs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataSyncModel> createDataSync(
        @Parameter(name = "DataSyncModel", description = "", required = true) @Valid @RequestBody DataSyncModel dataSyncModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /data-syncs/{id} : Delete an data sync
     * Delete an data sync.
     *
     * @param id The id of an data sync. (required)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "deleteDataSync",
        summary = "Delete an data sync",
        description = "Delete an data sync.",
        tags = { "data-sync" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/data-syncs/{id}"
    )
    
    default ResponseEntity<Void> deleteDataSync(
        @Parameter(name = "id", description = "The id of an data sync.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /data-syncs/{id} : Get an data sync by id
     * Get an data sync by id.
     *
     * @param id The id of an data sync. (required)
     * @return The data sync object. (status code 200)
     */
    @Operation(
        operationId = "getDataSync",
        summary = "Get an data sync by id",
        description = "Get an data sync by id.",
        tags = { "data-sync" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The data sync object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataSyncModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/data-syncs/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DataSyncModel> getDataSync(
        @Parameter(name = "id", description = "The id of an data sync.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /data-syncs : Get data syncs
     * Get data syncs.
     *
     * @return A list of data syncs. (status code 200)
     */
    @Operation(
        operationId = "getDataSyncs",
        summary = "Get data syncs",
        description = "Get data syncs.",
        tags = { "data-sync" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of data syncs.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DataSyncModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/data-syncs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DataSyncModel>> getDataSyncs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }, { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /data-syncs/{id} : Update an existing data sync
     * Update an existing data sync.
     *
     * @param id The id of an data sync. (required)
     * @param dataSyncModel  (required)
     * @return The updated data sync object. (status code 200)
     */
    @Operation(
        operationId = "updateDataSync",
        summary = "Update an existing data sync",
        description = "Update an existing data sync.",
        tags = { "data-sync" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated data sync object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataSyncModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/data-syncs/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataSyncModel> updateDataSync(
        @Parameter(name = "id", description = "The id of an data sync.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "DataSyncModel", description = "", required = true) @Valid @RequestBody DataSyncModel dataSyncModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
